{"./":{"url":"./","title":"关于本书","keywords":"","body":"云原生基础架构 《云原生基础架构》——Cloud Native Infrastructure 中文版。 本书为Cloud Native Infrastructure中文版，作者Justin Garrison和Kris Nova，英文版发行于 2017 年 11 月，已可以在网上免费获得，本书是关于创建和管理基础架构，以适用于云原生应用全生命周期管理的模式和实践。 阅读完这本书后，您将会有如下收获： 理解为什么说云原生基础架构是高效运行云原生应用所必须的 根据准则来决定您的业务何时以及是否应该采用云原生 了解部署和管理基础架构和应用程序的模式 设计测试以证明您的基础架构可以按预期工作，即使在各种边缘情况下也是如此 了解如何以策略即代码的方式保护基础架构 使用方式 您可以通过以下方式使用本书： GitHub地址：https://github.com/rootsongjc/cloud-native-infra GitBook在线浏览：https://jimmysong.io/cloud-native-infra 英文原版下载地址：https://go.heptio.com/cloud-native-infrastructure 鸣谢 本仓库基于 https://github.com/CloudNativeInfra/cni 编写，感谢原仓库贡献者的内容组织和翻译。 License 本书英文版版权属于 O’Reilly，中文版版权归属于机械工业出版，基于署名-非商业性使用-相同方式共享 4.0（CC BY-NC-SA 4.0）分享，本书为本人自行翻译，目的在于学习和巩固云原生知识，如有需要请购买纸质书。 社区&读者交流 加入 ServiceMesher 社区：ServiceMesher 社区是由一群拥有相同价值观和理念的志愿者们共同发起，于 2018 年 4 月正式成立。社区关注领域有：容器、微服务、Service Mesh、Serverless，拥抱开源和云原生。 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-10-28 22:14:55 "},"foreword.html":{"url":"foreword.html","title":"前言","keywords":"","body":"前言 还记得有一次告警电话半夜把我吵醒，发现是生产环境离线了。原来是系统瘫痪了，我们不得不要赔钱，这是我的错。 从那一刻起，我就一直痴迷于构建坚如磐石的基础架构和基础架构管理系统，这样我就不会重蹈覆辙了。在我的职业生涯中，我为Terraform、Kubernetes，一些编程语言和Kops做出过贡献，并创建了Kubicorn。我不仅见证了系统基础架构的发展，而且我也帮助完善了它。随着基础架构行业的发展，我们发现企业基础架构现在正以新的、令人兴奋的方式通过栈的应用层进行管理。到目前为止，Kubernetes是这种管理基础架构的新范例的最成熟的例子。 我与人合著了这本书，部分地介绍了将基础架构作为云原生软件的新范例。此外，我希望鼓励基础架构工程师开始编写云原生应用程序。在这本书中，我们探讨了管理基础架构的丰富历史，并为云原生技术的未来定义了管理基础架构的模式。我们解释了基础架构由软件化API驱动的重要性。我们还探索了创建复杂系统的第一个基础架构组件的引导问题，并教授了扩展和测试基础架构的重要性。 我于2017年加入Heptio，担任资深布道师，并且很高兴能与行业中最聪明的系统工程师密切合作。构建纯粹的开源技术对我来说一直都很重要，Heptio也拥有这种激情。我很荣幸能在这样一个环境中工作，让我更热爱这个行业。我希望你喜欢这本书，就像Justin和我喜欢写这本书一样。 ——Kris Nova 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-10-28 21:54:00 "},"introduction.html":{"url":"introduction.html","title":"介绍","keywords":"","body":"介绍 基础设施技术的历史向来引人入胜。由于要求以巨大的规模经营，它已经经历了一次快速的颠覆性变革。除了计算机和互联网的早期，基础设施创新的步伐是无与伦比的。这些创新使基础架构更快，更可靠，更有价值。 有些公司的人将基础设施推到了极限，他们已经找到了自动化和抽象的方法，提取基础设施更多商业价值。通过提供灵活的可用资源，他们将曾经是昂贵的成本中心转变为所需的商业公用事业。 然而，公用事业公司很少为企业提供财务价值，这意味着基础设施往往被忽略并被视为不必要的成本。这使得投入创新或改进的时间和金钱很少。 这样一个如此简单且令人着迷的业务堆栈如何被轻易忽略？当基础设施出现故障时，业务显然会受到重视，那么为什么基础设施很难改善呢？ 基础设施已经达到了使消费者都感到无聊的成熟度。然而，它的潜力和新挑战又激发了实施者和工程师们新的激情。 扩展基础设施并使用新的业务方式让来自不同行业的工程师都能找到解决方案。开源软件（OSS）和社区间的互相协作，这股力量又促使了创新的激增。 如果管理得当，今天基础设施和应用方面的挑战将会不一样。这使得基础设施建设者和维护人员可以取得进展并开展新的有意义的工作。 有些公司克服了诸如可扩展性、可靠性和灵活性等挑战。他们创建并封装了一些项目，这项项目中封装了可供他人遵循的模式。这些模式有时很容易被实现者发现，但在其他情况下，它们不太明显。 在本书中，我们将分享来自云原生技术前沿的公司的经验教训，使您能够有效解决可靠运行可伸缩应用程序的问题。现代商业发展非常迅速。本书中的模式将使您的基础设施能够跟上业务的速度和敏捷性需求。更重要的是，我们会让您自行决定何时采用这些模式。 这些模式中有很多都已经在开源项目中得到了体现。其中一些项目由云原生计算基金会（CNCF）维护。这些项目和基金会并不是模式的唯一体现，但忽视它们会让你失去理智。以它们为例，但要自己进行尽职调查，以审核您所采用的每个解决方案。 我们将向您展示云原生基础设施的益处以及可扩展系统和应用程序的基本模式。我们将向您展示如何测试您的基础设施，以及如何创建一个可以适应您需求的灵活的基础设施。您将了解哪些方面是重要的以及接下来会发生什么事情。 这本书可以激励你继续前进并自由分享你在社区中学到的知识。 谁应该读这本书 如果您是开发基础设施或基础设施管理工具的工程师，那么本书就是为您准备的。本书将帮助您了解创建旨在在云环境中运行的基础设施的模式、流程和实践。通过了解应该怎么做，您可以更好地了解应用程序的作用，以及应该何时构建基础设施或使用云服务。 应用程序工程师从本书中还可以发现哪些服务应该是其应用程序的一部分，哪些服务应该由基础设施提供。通过本书，他们还会发现他们应该与编写应用程序管理基础设施的工程师共同承担的责任。 希望提升技能并系统地在设计基础设施和维护云网关基础设施方面发挥更大作用的系统管理员也可以从本书中学到很多。 你是否在公有云中运行所有的基础设施？本书将帮助您了解何时使用云服务以及何时构建自己的抽象或服务。 运行在数据中心还是本地云？我们将概述现代应用对基础设施的期望，并将帮助您了解利用当前投资的必要服务。 这本书不是一本教程，除了给出实现示例之外，我们没有指出特定的产品。对于经理、董事和高管来说，这可能太过技术性，但可能会有所帮助，具体取决于该角色的参与和技术专长。 最重要的是，如果您想了解基础设施如何影响业务，请阅读本书，以及如何创建经证实可为具备全球互联网规模运营的企业工作的基础设施。即使您的应用程序不需要扩展到这种规模，如果您的基础设施是使用此处描述的模式构建的，并且考虑到灵活性和可操作性，这本书仍然值得一读。 为什么我们写了这本书 我们希望通过专注于模式和实践而不是特定产品和供应商来帮助您了解。当前存在太多的解决方案而不了解它们本身到底要解决什么问题。 我们相信通过云原生应用程序管理云原生基础设施的好处，并且我们希望所有人都具有这种意识。 我们希望回馈社区，推动行业向前发展。我们发现这样做的最好方式是解释业务和基础设施之间的关系，阐明问题并解释发现它们的工程师和组织所做的解决方案。 以不涉及产品的方式解释模式并不总是很容易，但了解产品存在的原因很重要。我们经常使用产品作为模式的例子，但只有当它们会帮助您提供解决方案的实施示例时才会提到。 如果没有无数人数万小时的自愿编写代码，帮助他人以及投资社区，我们就不会走到这里。我们非常感谢那些帮助我们了解这些模式的人们，我们希望能够回馈并帮助下一代工程师。这本书就是我们表达谢意的方式。 浏览本书 本书的组织结构如下： 第1章介绍云原生基础设施是什么以及我们如何走到当前这一步。 第2章可以帮助您决定是否以及何时采用后面章节中预先描述的模式。 第3章和第4章展示了应该如何部署基础设施以及如何编写应用程序来管理它。 第5章将教你如何从测试开始就设计可靠的基础设施。 第6章和第7章展示了如何管理基础设施和应用程序。 第8章总结并提供了一些有关未来发展的见解。 如果你像我们一样，你不会从前到后完整看完本书。以下是关于本书主题的一些建议： 如果您是一位专注于创建和维护基础设施的工程师，您应该至少阅读第3章至第6章。 应用程序开发人员可以专注于第4、5和7章关于将基础架构工具开发为云原生应用程序。 所有不构建云原生基础设施的人都将从第1、2、8章中受益匪浅。 在线资源 您应该通过访问CNCF网站熟悉云原生计算基金会（CNCF）及其托管项目。本书中的许多项目都被用作示例。 您还可以通过查看CNCF景观项目（参见图P-1），了解项目这些项目的全局视图。 云原生应用程序是从Heroku的12因素的定义开始的。我们会解释它们之间的相似之处，但你应该熟悉下12因素是什么（参见http://12factor.net）。 还有许多关于DevOps的书籍、文章和演讲。尽管本书不关注DevOps实践，但是在实现云原生基础设施时，如果没有DevOps规定的工具、实践和文化，将很难实现。 图P-1. CNCF Landscape 致谢 Justin Garrison 感谢Beth、Logan、我的朋友、家人以及在此过程中支持我们的同事。感谢那些帮助我们的社区和社区领袖以及给予宝贵反馈的评论者。感谢Kris让这本书变得更好，感谢读者花点时间阅读本书并提高你的技能。 Kris Nova 感谢Allison、Bryan、Charlie、Justin、Kjersti、Meghann和Patrick为我写这本书所作出的帮助。我爱你们，永远感激你们为我所做的一切。 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-10-28 22:22:26 "},"what-is-cloud-native-infrastructure.html":{"url":"what-is-cloud-native-infrastructure.html","title":"第1章 什么是云原生基础架构？","keywords":"","body":"第1章 什么是云原生基础架构？ 基础架构是指支持应用程序的所有软件和硬件，包括数据中心、操作系统、部署流水线、配置管理以及支持应用程序生命周期所需的任何系统或软件。 已经有无数的时间和金钱花在了基础架构上。通过多年来不断的技术演化和实践提炼，有些公司已经能够运行大规模的基础架构和应用程序，并且拥有卓越的敏捷性。高效运行的基础架构可以使得迭代更快，缩短投向市场的时间，从而加速业务发展。 使用云原生基础架构是有效运行云原生应用程序的要求。如果没有正确的设计和实践来管理基础架构，即使是最好的云原生应用程序也会浪费。本书中的实践并不一定需要有巨大的基础架构规模，但如果您想从云计算中获取回报，您应该听从开创了这些模式的人的经验。 在我们探索如何构建云中运行的应用程序的基础架构之前，我们需要了解我们是如何走到这一步。首先，我们将讨论采用云原生实践的好处。接下来，我们将看一下基础架构的简历，然后讨论下一阶段的功能，称为“云原生”，以及它与您的应用程序、运行的平台及业务之间的关系。 在明白了这一点后，我们将向您展示解决方案及实现。 云原生的优势 采用本书中的模式有很多好处。它们仿照谷歌、Netflix和亚马逊这些成功的公司——不是单靠模式保证它们的成功，而是它们提供了这些公司成功所需的可扩展性和敏捷性。 通过选择在公有云中运行基础架构，您可以更快地创造价值并专注于业务目标。只需构建您的产品所需的内容，并从其他提供商那里获得服务，就可以缩短交付时间，提高灵活性。有些人可能因为“供应商锁定”而犹豫不决，但最糟糕的锁定是您自己建立的锁定。有关不同类型的锁定，以及您应该如何处理的更多信息，请参阅附录B。 消费服务还可让您使用所需服务构建定制平台（有时称为服务即平台[SaaP]）。当您使用云托管的服务时无需精专于管理应用程序所需要的每项服务。这极大地加强了业务变更和业务增值的能力。 当您无法使用服务时，您应该构建应用程序来管理基础架构。当您这样做时，规模瓶颈不再取决于每个运维工程师可以管理多少台服务器。相反，您可以像扩展应用程序一样来扩展您的基础架构。换句话说，如果您能够运行可扩展的应用程序，则可以使用应用程序扩展您的基础架构。 同样的好处适用于构建灵活且易于调试的基础架构。您可以使用与管理业务应用程序相同的工具来洞察您的基础架构。 云原生实践还可以缩小传统工程角色之间的差距（DevOps的共同目标）。系统工程师将能够从应用程序中学习最佳实践，开发工程师可以拥有应用程序运行所在的基础架构的所有权。 云原生基础架构的解决方案不一定适用于所有问题，您有责任了解它是否适合您的环境（参见第2章）。然而，在创造了这些实践的公司以及采用以该模式创建的工具的公司中，云原生基础架构的成功可以说显而易见。请参见附录C的一个例子。 在深入了解解决方案之前，先让我是探究一下是什么问题导致这些模式的出现。 服务器 在互联网早期，Web基础架构始于物理服务器。服务器庞大，吵闹且昂贵，需要大量的电力和人员投入以保持它们的运行。需要细心照料，尽可能保持长时间运行。 与云基础架构相比，购买这些设备让应用程序运行在上面会更困难。 一旦您买了服务器，它就是您的了，无论好坏，都要维护。使用物理服务器适合已确定成本的业务。持有物理服务器并运行的时间越长，您花费的钱越多。做适当的产能规划并确保您获得最佳的投资回报是很重要的。 物理服务器非常棒，因为它们功能强大，可以根据需要进行配置。故障率相对较低，使用冗余电源供应，风扇和RAID控制器来避免出现故障。也可以持续运行很长时间。企业可以通过延长保修和更换零部件，从购买的硬件中挤出额外的价值。 但是，物理服务器会导致浪费。服务器不仅没有被充分利用，而且还带来了很多开销。在同一台服务器上运行多个应用程序是很困难的。当在同一台服务器上最大限度得部署多个应用程序时，软件冲突，网络路由和用户访问都变得更加复杂。 硬件虚拟化承诺可以解决其中的一些问题。 虚拟化 虚拟化使用软件来模拟物理服务器的硬件。虚拟服务器可以按需创建，完全可以通过软件编程，只要您可以模拟硬件，就永远不会出现损耗。 使用hypervisor可以增加这些优势，因为您可以在物理服务器上运行多个虚拟机（VM）。它还使得应用程序可移植，因为您可以将虚拟机从一台物理服务器移动到另一台物理服务器。 然而，运行自己的虚拟化平台的一个问题是虚拟机仍然需要硬件来运行。公司仍然需要拥有运行物理服务器所需的所有人员和流程，但是现在容量规划变得更加困难，因为他们还必须考虑到虚拟机的开销。至少，公有云出现之前就是如此。 基础架构即服务 基础架构即服务（IaaS）是云提供商的众多产品之一。它提供了原始的网络、存储和计算能力，客户可以根据需要使用它们。它还包括一些支持服务，如身份和访问管理（IAM）、供应和库存系统。 IaaS允许公司摆脱他们的所有硬件，并从别人那里租用虚拟机或物理服务器。这释放了大量人力资源，摆脱了购买、维护以及在某些情况下容量规划所需的流程。 IaaS从根本上改变了基础架构与业务的关系。不是随着时间的推移受益的资本支出，而是运营业务的运营支出。企业可以像支付电力和人们的时间一样支付基础架构。通过基于消费的计费，您越早摆脱基础架构，运营成本就越低。 托管的基础架构还为客户提供了可消费的HTTP应用编程接口（API），以便按需创建和管理基础架构。工程师不需要购买订单并等待物品出货，就可以进行API调用，并创建服务器。服务器可以轻松删除和丢弃。 在云中运行基础架构不会使您的基础架构成为云原生。IaaS仍然需要基础架构管理。在购买和管理物理资源之外，您可以（也有许多公司）认为IaaS与过去购买服务器在自己的数据中心架设的传统基础架构一模一样。 即使没有“货架和堆叠”，仍然有大量的操作系统、监控软件和支持工具。自动化工具帮助减少了运行应用程序所需的时间，但通常根深蒂固的流程会削弱IaaS的优势。 平台即服务 就像IaaS对VM消费者隐藏了物理服务器一样，平台即服务（PaaS）也对应用程序隐藏了操作系统。开发人员编写应用程序代码并定义应用程序的依赖关系，平台负责创建运行，管理和暴露它所必要的基础架构。与需要基础架构管理的IaaS不同，PaaS中的基础架构由平台提供商管理。 事实证明，PaaS限制要求开发人员以不同的方式编写应用程序，以便平台可以有效管理。应用程序必须包含允许由平台管理而不访问底层操作系统的功能。工程师不能再依赖SSH登入到服务器来读取磁盘上的日志文件。现在应用程序的生命周期和管理由PaaS控制，工程师和应用程序需要适应这个流程。 这些限制带来了很大的好处。应用程序开发周期变短了，因为工程师不需要花时间管理基础架构。在平台上运行的应用程序是我们现在称为“云原生应用程序”的开始。利用代码中的平台限制，已经一定程度上改变了当今编写应用程序的方式。 12因素应用程序 Heroku是提供公有PaaS的早期先驱之一。通过自己平台的多年扩展，该公司能够确定帮助应用程序在其环境中更好运行的模式。Heroku定义了应用程序时应实现的12个主要因素。 这12个因素是通过将代码逻辑与数据分离来使开发人员更高效，尽可能自动化，独立的构建、传输和运行阶段过程；并声明所有的应用程序的依赖关系。 如果您使用PaaS提供商所提供的基础架构，恭喜您已拥有云原生基础架构的诸多优势。这包括Google App Engine、AWS Lambda和Azure Cloud Services等平台。任何成功的云原生基础架构都将向应用工程师展示自助服务平台，以部署和管理代码。 但是，许多PaaS平台不足以满足业务需求。它们通常会限制平台运行的语言、库和功能以实现从应用程序中抽离基础架构的承诺。公有PaaS提供商还将限制哪些服务可以与应用程序集成以及这些应用程序可以在哪里运行。 公有平台牺牲了应用程序的灵活性，使基础架构成为别人的问题。图1-1是如果您运行自己的数据中心，在IaaS中创建基础架构，在PaaS上运行应用程序或通过软件即服务（SaaS）运行应用程序时需要管理的组件的直观表示。 您需要运行的基础架构组件越少越好；但是在公有PaaS提供商中运行所有应用程序可能不是一种选择。 图1-1. 基础架构层 云原生基础架构 “云原生”是一个过度使用的术语。尽管它已被市场所劫持，但仍具有工程和管理上的意义。对我们来说，它意味着在这个公有云提供商的世界中正发生的技术变革。 云原生基础架构是隐藏在有用的抽象背后的基础架构，由API控制，由软件管理并具有运行应用程序的目的。利用这些特征运行基础架构，能以可扩展高效的方式管理该基础架构。 当它们成功地向消费者隐藏复杂性时，抽象是有用的。它们可以实现技术的更复杂的使用，但是它们也限制了技术的使用方式。它们适用于底层技术，例如TCP如何提取IP或更高级别的技术，如虚拟机如何抽象物理服务器。抽象应该总是允许消费者“向上移动堆栈”而不是重新实现底层。 云原生基础架构需要抽象基础IaaS产品以提供自己的抽象。新层负责控制它下面的IaaS，并将自己的API暴露给消费者控制。 由软件管理的基础架构是云中的一个关键区别点。软件控制的基础架构使基础架构能够扩展，并且在弹性、供应和可维护性方面也发挥着重要作用。软件需要了解基础架构的抽象概念，并知道如何获取抽象资源并相应地在可消费的IaaS组件中实现它。 这些模式不仅影响基础架构的运行方式，而且在云原生基础架构上运行的应用程序类型、在其上工作的人员类型与传统基础架构中是不同的。 如果云原生基础架构看起来很像PaaS产品，那么我们如何才能知道构建自己的产品时需要注意什么？我将快速描述一些领域，它们可能看起来像是云原生解决方案，但不提供云原生基础架构的所有方面。 什么不是云原生基础架构？ 云原生基础架构不等于在公有云上运行基础架构。仅租用服务器并不会使您的基础架构云原生化。管理IaaS的流程与运行物理数据中心通常没有什么不同，许多将现有基础架构迁移到云的公司都未能获得回报。 云原生不等于在容器中运行应用程序。Netflix最先推出云原生基础架构时，几乎所有应用程序都部署在虚拟机中，而不是在容器中。使用容器的方式打包应用程序并不能意味着拥有了自治系统的可扩展性和优势。即使应用程序是通过持续集成和持续交付渠道自动构建和部署的，也不等于就可以从API驱动部署的基础架构中受益。 也不是说只要您运行了容器编排器（例如Kubernetes和Mesos）就是云原生架构。容器编排器提供了云原生基础架构所需的平台功能，但如果未按预期方式使用这些功能的话，那也只是将应用程序会动态调度到一组服务器上而已。这是一个非常好的起步，但仍有很多工作要做。 调度器与编排器 “调度器”和“编排器”这两个术语通常可以互换使用。 在大多数情况下，编排器负责集群中的所有资源使用（例如：存储，网络和CPU）。该术语通常用于描述执行许多任务的产品，如健康检查和云自动化。 调度器是编排平台的一个子集，仅负责为进程和服务选择所运行的服务器。 云原生不等于微服务或基础架构即代码。微服务意味着更快的开发周期和更小的独立功能，但是单体应用程序可以具有相同的功能，使其能够通过软件有效管理，并且还可以从云原生基础架构中受益。 基础架构即代码以机器可解析的语言或领域特定语言（DSL）定义、使基础架构自动化。使用代码管理基础架构的传统工具包括配置管理工具，例如Chef和Puppet。这些工具在自动执行任务和提供一致性方面很有用，但是对于为超出单个服务器的基础架构提供必要的抽象描述方面存在缺陷。 配置管理工具一次只自动化一台服务器，并靠人将服务器提供的功能绑定在一起。人成了管理大规模基础架构的潜在瓶颈。这些工具也不会使构建完整系统所需的云基础架构（例如存储和网络）的额外部分自动化。 尽管配置管理工具为操作系统的资源（例如软件包管理器）提供了一些抽象，但它们对底层操作系统的抽象还不足以轻松管理软件包。如果有工程师想要管理系统中的所有软件包和文件，这将是一个非常痛苦的过程，因为软件包对于每个配置变体来说都是独一无二的。同样，定义不存在或不正确的资源配置管理只会白白的消耗系统资源而不能给我们提供任何价值。 虽然配置管理工具可以帮助自动化部分基础架构，但它们无法更好地管理应用程序。我们将在后面的章节中通过查看部署、管理、测试和操作基础架构的流程，探讨云原生基础架构与配置管理工具的不同之处，但在此之前我们将了解何为成功的应用以及使用云原生基础架构的时机。 云原生应用程序 就像云改变了业务和基础架构之间的关系一样，云原生应用程序也改变了应用程序和基础架构之间的关系。我们需要了解与传统应用程序相比，云本身有什么不同，因此我们需要了解它们与基础架构的新关系。 为了写好本书，也为了有一个共享词汇表，我们需要定义“云原生应用程序”是什么意思。云原生与12因素应用程序不同，即使它们可能共享一些类似的特征。如果您想了解更多细节，请阅读Kevin Hoffman撰写的Beyond the Twelve-Factor App（O'Reilly，2012）。 云原生应用程序被设计为在平台上运行，具有弹性、敏捷性、可操作性和可观察性。弹性能够容忍故障而不是试图阻止故障，利用了在平台上运行的动态特性。敏捷性允许快速部署和快速迭代。可操作性从应用程序内部控制应用程序生命周期，而不是依赖外部进程和监视器。可观察性提供信息来回答有关应用程序状态的问题。 云原生定义 云原生应用程序的定义仍在发展中。还有像CNCF这样的组织可以提供其他的定义。 云原生应用程序的这些特征是通过各种方式获取的。它通常取决于应用程序的运行位置以及企业流程和文化。以下是实现云原生应用程序所需特性的常用方法： 微服务 健康报告 遥测数据 弹性 声明式的，而不是反应式的 微服务 作为单个实体进行管理和部署的应用程序通常称为单体应用。最开始开发应用程序时，单体有很多好处。它们更易于理解，并允许您在不影响其他服务的情况下更改主要功能。 随着应用程序复杂性的增长，单体应用的优势也在逐渐减小。它们变得更难理解，而且失去了敏捷性，因为工程师很难推断和修改代码。 对付复杂性的最好方法之一是将明确定义的功能分成更小的服务，并让每个服务独立迭代。这增加了应用程序的灵活性，允许根据需要更轻松地更改部分应用程序。每个微服务可以由单独的团队进行管理，使用适当的语言编写，并根据需要进行独立扩缩容。 只要每项服务都遵守强有力的合约，应用程序就可以快速改进和改变。当然，转向微服务架构还有许多其他的考虑因素。最后才考虑的是弹性通信，我们在附录A中有讨论。 我们无法考虑到迁移到微服务的所有考虑因素。使用微服务并不意味着就是云原生基础架构。如果您想拓展阅读，我们推荐Sam Newman的Building Microservices（O'Reilly，2015）。虽然微服务是实现应用程序灵活性的一种方式，但正如我们之前所说的，它们不是云原生应用程序的必需条件。 健康报告 停止逆向工程并开始从应用内部进行监控。 ——Kelsey Hightower，Monitorama PDX 2016：healthz 没有人能比开发者更了解应用程序需要哪些条件才能健康运行了。曾经基础架构管理员都试图为自己负责运行的应用程序定义“健康”状态。在不了解是什么因素真正使应用程序的健康的情况下，监控和告警应用程序的不健康时状态往往是脆弱和不完整的。 为了提高云原生应用程序的可操作性，应用程序应该暴露健康检查。开发人员可以以命令或过程信号的方式实现，以便应用程序在执行自我检查之后响应，或者更常见的是：通过应用程序提供Web服务，返回HTTP状态码来检查健康状态。 Google Borg示例 Google的Borg报告中列出了一个健康报告的例子： 几乎每个在Borg下运行的任务都包含一个内置的HTTP服务器，该服务器发布有关任务运行状况和数千个性能指标（如RPC延迟）的信息。Borg会监控运行状况检查URL并重新启动不及时响应或返回HTTP错误代码的任务。其他数据由监控工具跟踪，用于仪表板和服务级别目标（SLO）的告警。 将监控应用健康的责任转移到应用程序内部，这使得应用程序更容易管理和自动化。应用程序应该知道自己是否在正常运行以及自己的依赖（例如，访问数据库）。开发人员需要与产品经理合作来定义应用服务的业务功能并相应地编写测试。 提供健康检查的应用程序示例例如Zookeeper的ruok命令和etcd的HTTP健康端点。 应用程序不仅仅有健康或不健康的状态。它们将经历一个启动和关闭过程，在这个过程中它们应该通过健康检查，报告它们的状态。如果应用程序可以让平台准确了解它所处的状态，平台将更容易知道如何操作。 平台需要知道应用程序何时可以接收流量，这就是一个很好的例子。在应用程序启动时，如果它不能正确处理流量，它就应该表现为未准备好。此额外状态将防止应用程序过早终止，因为如果运行状况检查故障，平台可能会认为应用程序不健康，并且会反复重启它。 应用程序健康只是自动化应用程序生命周期的一部分。除了知道应用程序是否健康之外，您还需要知道应用程序正在进行哪些工作。这些信息来自遥测数据。 遥测数据 我们使用遥测数据（telemetry）来进行决策。遥测数据可能与健康报告重叠，但它们用途不同。健康报告汇报应用程序的生命周期状态，而遥测数据汇报应用程序的业务目标。 我们测量的指标有服务等级指标（SLI）或关键性能指标（KPI）。这些是特定于应用程序的数据，可以确保应用程序的性能处于服务级别目标（SLO）内。如果您需要更多关于这些术语的信息以及与应用程序、业务需求的关系，我们推荐您阅读来自Site Reliability Engineering（O'Reilly）的第4章。 遥测和度量标准用于解决以下问题： 应用程序每分钟收到多少请求？ 有没有错误？ 应用程序延迟怎么样？ 下单需要多长时间？ 通常会将数据抽取或推送到时间序列数据库（例如Prometheus或InfluxDB）进行聚合。遥测数据需要被收集数据的系统格式化。 至少需要实施度量标准的RED（Rate、Error、Duration）方法，该方法收集应用程序的到达率、错误和执行时间。 到达率（Rate） 收到了多少个请求 错误（Error） 应用程序有多少错误 持续时间（Duration） 多久才能收到回复 遥测数据应该用于告警而不是健康监测。在能够动态自我修复的环境中，我们不关注应用程序单个实例的生命周期，更关注的是应用程序的整体SLO。健康报告对于自动应用程序管理仍然很重要，但不应该用于站点工程师。 不管应用程序是1个实例还是50个实例不健康，只要满足应用程序的业务需求，我们就可能不会收到警报。Metric 会告诉您是否满足SLO，应用程序的使用方式以应用程序是否是“正常”。告警有助于您将系统恢复到已知的良好状态。 它移动，我们就追踪。如果没有移动我们就也会画一些图形，以防它突然开始运动。 ——Ian Malpass，Measure Anything, Measure Everything 警报（Alert）不应该与日志记录混淆。记录（Logging）用于调试、开发和观察。记录暴露了应用程序的内部功能。Metric有时可以根据日志（例如错误率）计算，但需要额外的聚合服务（例如ElasticSearch）和处理。 弹性 有了遥测和监控数据后，还要确保应用程序有故障自适应能力。弹性是基础架构的责任，但云原生应用程序也需要承担部分工作。 基础架构设计之初就是要抵御故障（failure）。硬件通常需要有多个硬盘驱动器、电源以及全天候监控和可更换的部件以保持应用程序可用。云原生应用程序应当正视故障而不是避免故障。 在任何平台上，尤其是云上，可靠性都是其最重要的特性。 ——David Rensin，e ARCHITECT Show：来自Google的关于云计算的速成课程 光是讲如何设计弹性的应用程序可能就可以写一本书了。我们将在云原生应用程序中考虑弹性的两个主要方面：面向故障设计和优雅降级。 面向故障设计 唯一永远不会故障的系统是那些与您的生命安全息息相关的系统（例如心脏植入物和刹车系统）。如果想要让服务永远运行，您需要花费太多时间设计服务来抵御故障，那样就没有足够的时间增加业务价值。SLO确定服务需要运行多长时间。您花费在工程设计上超出SLO的正常运行时间的任何资源都将被浪费掉。 每项服务您可以测量两个值，平均无故障时间（MTBF，Mean Time Between Failure）和平均恢复时间（MTTR，Mean Time To Recovery）。通过监控和metric可以知道是否达到SLO，但运行应用程序的平台是保持高MTBF和低MTTR的关键。 在任何复杂的系统中，都会有故障。您可以管理硬件中的某些故障（例如，RAID和冗余电源），以及某些基础架构中的故障（例如负载平衡器）。但是因为应用程序知道他们什么时候健康，所以他们也应该尽可能地管理自己的故障。 设计一个以故障期望为目标的应用程序将比假定可用性的应用程序更具防御性。当故障不可避免时，将会有额外的检查，故障模式和日志内置到应用程序中。 没人可以预料应用程序所有可能的故障。假设所有东西都可能会故障，这是一种云原生应用程序的模式。 应用程序的最佳状态是健康状态。第二好的状态是故障状态。其他一切都是非二元的，难以监控和排除故障。Honeycomb首席执行官Charity Majors在她的一篇题为“Ops: It’s Everyone’s Job Now”的文章中指出：“分布式系统永远不会起作用；它们处于部分退化服务的持续状态。接受故障，面向设计设计，保护和缩小关键路径。“ 无论发生什么故障，云原生应用程序都应该是可适应的。它们预期故障，所以他们在检测到时进行调整。 有些故障不能也不应该被设计到应用程序中（例如，网络分区和可用区故障）。该平台应自主处理未集成到应用程序中的故障域。 优雅降级 云原生应用程序需要有一种方法来处理过载，无论是应用程序还是负载下的相关服务。处理负载的一种方式是优雅降级。 “站点可靠性工程”一书中描述了应用程序的优雅降级，因为它提供的响应在负载过重的情况下“不如正常响应准确或含有较少数据的响应，但计算更容易”。 减少应用程序负载的某些方面由基础架构处理。智能负载均衡和动态扩展有助于减轻应用程序的负载，但有的时候，应用程序可以承受的负载比它可以处理的负载更多。云原生应用程序应知道这种必然性并作出相应的反应。 优雅降级的重点是允许应用程序始终返回请求的响应。如果应用程序没有足够的本地计算资源，并且依赖服务没有及时返回信息，则这是正确的。如果一个服务依赖于一个或多个其他服务，即使依赖的服务无应答，该应用程序也应该可以应答。还有种解决方案是，当服务降级时，返回部分应答或使用本地缓存中的旧信息应答。 尽管优雅的降级和故障处理都应该在应用程序中实现，但是平台的多个层面也应该提供帮助。如果采用微服务，则网络基础架构将是在提供应用弹性方面发挥积极作用的关键组件。有关构建弹性网络层的更多信息，请参阅附录A。 可用性数学 云原生应用程序需要在基础架构之上建立一个平台，以使基础架构更具弹性。如果您希望将现有应用程序“提升并转移”到云中，则应检查云提供商的服务级别协议（SLA），并考虑在使用多个服务时会发生什么情况。 如果在云上运行应用程序，我们来看下可用性会是怎样。 计算基础架构的典型可用性是每月99.95％的正常运行时间。这意味着您的实例每天可能会停机43.2秒，这仍在您的云服务提供商的SLA中。 另外，实例的本地存储（例如EBS卷）也具有99.95％的正常可用时间。如果幸运的话，他们都会同时出现故障，但最糟糕的情况是他们可能会在不同的时间停机，让您的实例只有99.9％的可用性。 您的应用程序可能还需要一个数据库，而不是自己安装数据库，可能的停机时间为1分26秒（99.9％可用性）的情况下，选择可靠性为99.95％的更可靠的托管数据库。这使您的应用程序的可靠性达到99.85％，或者每天可能发生2分钟9秒的停机时间。 将可用性乘到一起可以快速了解为什么应以不同方式处理云。如果云提供商不符合其SLA，会退还您账单中一定比例的费用。 虽然您不必为停机支付费用，但您的业务必须能够容忍云计算的信用保证。如果云平台的可用性保证无法满足您的应用程序的可用性需求，那么您应该考虑是否该在云上运行这个应用程序。 声明式，非反应式 由于云原生应用程序设计为在云环境中运行，因此它们与基础架构和支持应用程序的交互方式与传统应用程序不同。在云原生应用程序中，与任何事物进行通信都是通过网络进行的。很多时候，网络通信都是通过RESTful HTTP调用完成的，也可以通过其他接口，如远程过程调用（RPC）来实现。 传统的应用程序会通过消息队列，写在共享存储上的文件或触发shell命令的本地脚本来自动执行任务。通信方法对发生的事件作出反应（例如，如果用户单击提交，运行提交脚本）并且通常需要存在于同一物理或虚拟服务器上的信息。 Serverless Serverless平台是云原生化的，面向事件响应而设计。通过HTTP API进行通信使得它们在云中工作得很好，是单用途函数，在它们的函数调用中声明。该平台还可以通过在云中进行扩展和访问来提供帮助。 传统应用程序中的反应性通信常常是通过增强弹性。如果应用程序在磁盘或消息队列中写入文件，然后应用程序崩溃，则消息或文件的结果仍可能完成。 这并不是说不应该使用像消息队列这样的技术，而是说不应该将它们作为动态和不断发生故障的系统中的唯一弹性层。从根本上讲，应用程序之间的通信应该在云原生环境中改变 ——不仅因为还有其他方法来构建通信弹性（请参阅附录A），还因为在云中复制传统通信方法往往需要更多工作。 当应用程序可以信任通信的弹性时，应该停止使用反应式并开始使用声明式。声明式通信相信网络将传递消息，也相信应用程序将返回成功或错误。这并不是说应用程序监视变化并不重要。Kubernetes的控制器正是这样做到API Server。但是，一旦发现变更，它们就会声明一个新的状态，并相信API Server和kubelet会做必要的事情。 声明式通信模型由于多种原因而变得更加健壮。最重要的是，它规范了通信模型，并且它将功能实现从应用程序转移到远程API或服务端点，从而让实现某种状态到达期望状态。这有助于简化应用程序，并使它们彼此的行为更具可预测性。 云原生应用程序如何影响基础架构？ 希望您已经了解云原生应用程序与传统应用程序不同。云原生应用程序不能直接在PaaS上运行或与服务器的操作系统紧密耦合。它们期望在一个拥有大多数自治系统的动态环境中运行。 云原生基础架构在提供自主应用管理的IaaS之上创建了一个平台。该平台建立在动态创建的基础架构之上，以抽象出单个服务器并促进动态资源分配调度。 自动化与自治不一样。自动化允许人类对控制系统采取更多行动。 云原生是关于不需要人类做出决定的自治系统。它仍然使用自动化，但只有在决定了所需的操作之后。只有在系统不能自动确定正确的事情时才应该通知人。 具有这些特征的应用程序需要一个能够实际监控，收集度量标准并在发生故障时做出反应的平台。云原生应用程序不依赖于人为设置ping检查或创建Syslog规则。它们需要从选择基本操作系统或软件包管理器的过程中提取自助服务资源，并依靠服务发现和强大的网络通信来提供丰富的功能体验。 结论 运行云原生应用程序所需的基础架构与传统应用程序不同。基础架构的许多责任已经转移到应用程序中。 云原生应用程序通过分解为更小的服务来简化其代码复杂性。这些服务提供直接构建到应用程序中的监控、指标和弹性。需要新的工具来自动管理服务数量的激增和应用的生命周期。 现在基础架构负责整体资源管理、动态协调、服务发现等等。需要提供一个平台，使服务不依赖于单个组件，而是依赖于API和自治系统。第2章将更详细地讨论云原生基础架构功能。 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-10-28 21:54:00 "},"when-to-adopt-cloud-native.html":{"url":"when-to-adopt-cloud-native.html","title":"第2章 采纳云原生基础架构的时机","keywords":"","body":"第2章 采纳云原生基础架构的时机 云原生基础架构并不适合所有人。任何架构设计都经过了一系列的权衡。您只有熟悉自己的需求才能决定哪些权衡是有益的，哪些是有害的。 不要在不了解架构的影响和限制的情况下采用工具或设计。我们相信云原生基础架构有很多好处，但需要意识到不应该盲目的采用。我们不愿意引导大家通过错误的方式来满足需求。 怎么知道是否应该使用云原生基础架构设计？确定云原生基础架构是否适合您，下面是一些需要了解的问题： 您有云原生应用程序吗？(有关可从云原生基础架构中受益的应用程序功能，请参阅第1章) 您的工程团队是否愿意且能够编写出体现其作业功能的生产质量代码？ 您在本地或公有云是否拥有基于API驱动的基础架构（IaaS）？ 您的业务是否需要更快的开发迭代或非线性人员/系统缩放比例？ 如果您对所有这些问题都回答“yes”，那么您可能会从本书其余部分介绍的基础架构中受益。如果您对这些问题中的某个问题回答是“no”，这并不意味着您无法从某些云原生实践中受益，但是您可能需要做更多工作，然后才能从此类基础架构中充分受益。 在业务准备好之前武断地采用云原生基础架构效果会很糟糕，因为这会强制使用一个不正确的解决方案。在没有充分调查的情况下可能会失败，您可以能会把云原生架构看做是有缺陷或毫无用处的。鉴于之前尝试的云原生方案的失败，今后该方案也可能很难再次采用，无论它是否是正确的解决方案。 在您准备将组织和技术转变为云原生时，我们将讨论一些需要关注的领域。要考虑的事情有很多，关键领域是您的应用程序、组织中的人员、基础架构系统和您的业务。 应用程序 应用程序是准备工作中最简单的部分。设计模式已经很完善，自公共云出现以来，工具性能得到了显着提升。如果您无法构建云原生应用程序并通过自动部署管道来验证它们的话，则不应继续采用云原生基础架构。 构建云原生应用程序并不一定需要微服务。这并不意味着您必须用最流行的语言开发所有软件。您必须编写可以由软件管理的软件。 在开发过程中，人只会与云原生应用程序进行交互。其他一切都应该由基础架构或其他应用程序来管理。 应用程序应该可以动态地扩展出多个实例。扩展通常意味着负载均衡器后运行着同一个应用程序有多个副本。假定应用程序将状态存储在存储服务（即数据库）中，并且不需要运行实例之间的复杂协调。 动态应用程序管理意味着不需要人参与这项工作。应用程序度量触发了基础架构操作扩展应用程序。这是大多数云环境的基本特征。运行动态伸缩的资源组并不意味着您拥有云原生基础架构；但如果您的应用程序可以自动伸缩，它可能表明您的应用程序已准备就绪了。 为了使应用程序受益，编写应用程序和配置基础架构的人员需要支持这种工作方法。如果没有人愿意放弃对软件的控制，您将永远无法实现它的好处。 人 人是云原生基础架构中最难的部分。 如果您想建立一个能够用软件取代人们职能和决策的架构，那么您需要确保人们了解您有最大的诉求。不仅需要人们接受变化，还需要他们自己主动寻求改变。 开发应用程序很困难，运维基础架构很难。应用程序开发人员经常相信他们可以用工具和自动化取代基础架构运维，运维人员希望应用程序开发人员能够编写更可靠的代码，并提供自动调试和恢复。这些紧张关系是DevOps的基础，DevOps有许多其他书籍，包括由Jennifer Davis和Katherine Daniels撰写的Effective DevOps（O'Reilly，2016）。 人们不会扩大规模，也不擅长重复无聊的工作。 应用程序和系统工程师的目标应该是消除无聊和重复的任务，以便他们可以专注于更有趣的问题。他们需要具备开发可以包含业务逻辑和决策的软件的技能。需要有足够的工程师来编写所需的软件，更重要的是维护它。 最关键的方面是他们需要一起工作。如果没有其他方面的支持，工程的一方无法迁移到运行和管理应用程序的新方式。团队组织和沟通结构非常重要。 我们会尽快将团队准备好，但首先，我们必须确定基础架构迁移到云原生的时机。 系统 云原生应用程序需要系统抽象。应用程序不应该关注单个硬编码主机名。如果您的应用程序无法在个别主机上运行，那就说明您的系统尚未准备好使用于云原生基础架构。 使用单个服务器（虚拟机或物理机）运行操作系统，并将其转换为访问资源的方法，这就是我们所说的“抽象”。单个系统不应该是应用程序部署的目标。资源（CPU、内存和磁盘）应该集中在所有可用的机器上，然后由平台根据应用程序的请求进行分配。 在云原生基础架构中，您必须隐藏底层系统以提高可靠性。云计算基础架构（如应用程序）会预期基础组件故障，并且可以优雅地处理此类故障。这是必要的，因为基础架构工程师不再控制堆栈中的所有内容。 Kubernetes云原生基础架构 Kubernetes是一个框架，它使云的方式管理应用程序变得更加容易。但是，您也可以用一种非云原生的方式使用Kubernetes。 Kubernetes公开了基于其核心功能的扩展，但这不是您的基础架构的最终目标。其他项目(例如，OpenShift)建立在它之上，将Kubernetes从开发人员和应用程序中抽象出来。 应用程序应该运行在平台上。云原生基础架构并且鼓励这样运行基础架构的方式。 如果您的应用程序是动态的，但基础架构是静态的，那么您很快就会陷入单靠Kubernetes无法解决的僵局。 当这不再是一个挑战时，基础架构已经准备好成为云原生的了。一旦基础架构变得简单，自动化、自助服务和动态，就有可能被忽略。当系统可以被忽略，并且技术变得单调时，是时候向上移动堆栈了。 如果您的系统管理依赖于硬件定制或在“混合云”中运行，则您的系统可能还没有准备好。可能需要管理一个数据中心，并且私有化。您需要保持警惕，将建立数据中心的责任与管理基础架构的责任分开。 谷歌、Facebook、亚马逊和微软都发现通过开放的计算项目从头开始创建硬件是有好处的。之所以创建自己的硬件是因为有性能和成本的限制。因为硬件设计和基础架构构建者之间存在明确的责任分离，这些公司能够在创建定制硬件的同时运行云原生基础架构。它们不会受到“内部部署”的阻碍。相反，他们可以共同优化其硬件和软件，以获得更高的效率和性能。 管理自己的数据中心需要大量时间和金钱的投入。创建私有云也是如此。两者都需要建立和管理数据中心团队、创建和维护API的团队以及在IaaS API之上创建抽象的团队。 所有这些都可以完成，决定管理整个堆栈是否有价值取决于您的业务。 现在，我们看看业务领域需要做哪些准备才能迁移到云原生。 业务 如果系统的架构和组织的架构不一致，则组织的架构会胜出。 ——鲁斯马兰，“康威定律” 企业变革速度非常缓慢。当通过扩展人员来管理扩展系统不再有效时，以及产品开发需要更多灵活性时，他们可能已经准备好采用云原生实践了。 人无法无限扩展。对于增加管理更多服务器或开发更多代码的每个人来说，支持他们的人力基础架构（例如办公室空间）都有一定的压力。因为需要更多的沟通和协调，还会有更多额外的开销。 正如我们在第1章中讨论的那样，通过使用公有云，您可以通过租用服务器来减少一些流程和人员开销。即使使用公有云，您仍然会需要管理基础架构详细信息的人员（例如服务器，服务和用户帐户）。 当沟通结构反映业务需要创建的基础架构和应用程序时，业务已准备好采用云原生实践。这包括反映像微服务这样架构的沟通结构。他们可能是小型的独立团队，无需通过层层管理与其他团队交流或合作。 DevOps和Cloud Native DevOps可以补充团队合作的方式，并影响使用的工具类型。公司采用后有很多好处，包括快速原型化和提高部署速度。它也非常注重组织的文化。 云原生需要高性能组织，但更注重于设计、架构和健康度，而不是团队工作流程和文化。如果您原以为必须解决应用程序开发人员、基础架构运维以及技术部门中任何人员之间的交互问题，才可以成功地实现云原生模式的话，那么您可能会对此感到意外。 迫使业务变化的另一个限制因素是应用程序对敏捷性的要求更高了。企业不仅需要快速部署，还需要彻底改变部署的内容。 部署的原始数量无关紧要。重要的是尽可能快地提供客户价值。相信部署的软件将第一次，甚至是第100次，满足所有客户的需求，这是一个谬论。 当业务意识到需要频繁迭代和更改时，它可能已经准备好采用云原生应用程序了。只要在人员效率和流程方面遇到限制，且可以随时更改它，就可以准备迁移到云原生基础架构了。 所有那些表明何时采用云原生的因素都不能说明全部情况。任何设计都需要权衡折衷。因此，在某些情况下，云原生基础架构不是正确的选择。 什么情况下不需要云原生基础架构 只有了解了系统有哪些限制，再清楚系统可以带来的好处才有用。也就是说，是否采用一个系统的决定性因素是它的限制而使用它可以带来的利益。 记住需求随时间变化也很重要。现在的关键功能可能在未来并不是。同样，如果下面的情况目前并不理想，那么您可以不采用云原生。 技术限制 就像应用程序一样，在基础架构中，最简单的是技术性限制。如果您知道什么时候应该采用有技术优势的云原生基础架构，那么您可以思考下何时不应该采用云原生基础架构。 第一个限制是没有云原生应用程序。正如在第一章中讨论的那样，如果您的应用程序需要人工交互，无论是调度、重新启动还是搜索日志，云原生基础架构都没有多大好处。 即使您有一个可以动态调度的应用程序，也不会使其成为云原生。如果您的应用程序在Kubernetes上运行，但仍需要人工设置监控、日志收集和负载均衡，则它不是云原生。只是将应用程序部署在Kubernetes运行并不意味着云原生。 如果您有一个编排调度器，重要的是看看它是如何运行的。您是否需要下订单、创建工单或发送电子邮件以获取服务器？ 这些是您没有自助服务基础架构的指标，这是云计算的一项要求。 在云中，您只需提供帐单信息并调用API。即使您在内部运行服务器，您也应该有一个可以构建IaaS的团队，然后将云原生基础架构分层布局。 如果您要在自己的数据中心中构建云环境，图2-1显示了您的基础架构组件适合的示例。所有原始组件（例如，计算、存储、网络）都应该可以从自助式IaaS API中获得。 图2-1. 云原生基础架构的示例图层 在公有云中，您拥有IaaS和托管服务，但这并不意味着您的业务已准备好使用公有云。 当您构建运行应用程序的平台时，了解您正在进行的操作非常重要。最初的开发只是构建和维护平台所需花费的一小部分，特别是对业务至关重要的平台。 维护通常会消耗大约40％到80％（平均60％）的软件成本。因此，这可能是最重要的生命周期阶段，发现业务需求和建立开发所需的技能可能对于一个小团队来说太过分了。一旦您掌握了开发所需平台的技能，您仍然需要投入时间来改进和维护系统。这需要比初始开发更长的时间。 公有云提供商的产品为企业提供绝佳的运行环境。如果您不能或者不愿意让您的平台成为业务，那么您不应该自己创建一个平台。 请记住，您不必自己构建一切。您可以使用可以组装到所需平台的服务或产品。 可靠性仍然是基础架构的关键特性。如果您还没有准备好放弃对底层基础架构堆栈的控制，并且仍然通过接受故障来制造可靠的产品，那么云原生基础架构并不是正确的选择。 非技术限制同样重要，可能超出您的控制范围。 业务限制 如果现有流程不支持更改基础架构，则需要首先克服该障碍。幸运的是，您不必一个人做。 本书希望有助于向需要说服力的人清楚地解释云原生的好处和流程。还有许多案例研究和公司分享他们采用这些做法的经验。本书附录C中将提供一个案例研究，您还可以找到相关示例并与同行和管理层分享。 如果企业还没有实验的途径和支持尝试新事物的文化（以及伴随失败而来的后果），那么改变流程可能是不可能的。在这种情况下，您的需要等待达到必须改变的临界点，或者说服管理层认为改变是必要的。 以一个外部的视角准确辨别一个企业是否准备好采用云原生是不可能的。不过，下面这些流程可以明确指示一个公司未准备接纳云原生： 需要人工干预的资源请求 定期安排需要人工操作的维护窗口 手动库存跟踪和资源分配 电子表格清单 如果调度、部署、升级或监控服务，这些流程除了负责服务的团队以外还有其他人员参与的话，则可能需要在迁移到云原生基础架构之前或迁移期间解决这些流程。 有时也有业务无法控制的过程，例如行业法规。可悲的是，这些变化甚至比内部流程更难和更慢。 如果行业法规限制了发展的速度或敏捷性，我们就没有任何建议，只能尽您所能。如果法规不允许业务在公有云中运行，请尽量使用技术来运行内部部署。管理层将需要为任何管理机构制定的法规制定一个案例。 云原生基础架构还有另一个非技术障碍。在一些公司中，有一种不使用第三方服务的文化 如果您的公司不愿意或无法通过使用第三方托管服务的流程，则可能不适合采用云原生基础架构。我们将在附录B中更详细地讨论何时使用托管服务。 结论 要成功，单靠计划是不够的。还需要即兴发挥。 ——Isaac Asimov 在本章中，我们讨论了何时采用云原生基础架构的注意事项。有许多需要记住的领域，每种情况都是独一无二的。希望这些指导原则可以帮助您发现变革的适当时机。 如果您的公司已经采用了一些云原生实践，这些问题可以帮助确定可以采用这种架构的其他领域。当您在权衡云原生是否为正确的解决方案，以及如何开始时，了解这一点非常重要。 如果您尚未将云原生实践应用于工作，则没有捷径。企业和员工需要共同决定云原生是否是正确的解决方案，并共同取得进展。没有人独自成功。 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-11-03 11:13:53 "},"evolution-of-cloud-native-developments.html":{"url":"evolution-of-cloud-native-developments.html","title":"第3章 云原生部署的演变","keywords":"","body":"第3章 云原生部署的演变 我们在前一章中讨论了在采用云原生基础架构的前提。在部署之前，需要有由API驱动的基础架构（IaaS）供给。 在本章中，我们将探讨云原生基础架构拓扑的概念，并在云中实现它们。我们将学习可以帮助运维人员控制其基础架构的常用工具和模式。 部署基础架构的第一步应该是能够将其表述出来。传统上，可以在白板上处理，或者如果幸运的话，可以在公司wiki上存储的文档中处理。今天，一切都变得更加程序化，基础架构表述通常以便于应用程序解释的方式记录。无论如何表述，全面的表述基础架构的需求是不变的。 正如人们所期望的那样，精巧的云基础架构可以从简单的设计到非常复杂的设计。无论复杂性如何，必须对基础架构的表现给予高度的重视，以确保设计的可重复性。能够清晰地传递想法更为重要。因此，明确、准确和易于理解的基础架构级资源表述势在必行。 我们也将从制作精良的表述中获得很多好处： 随着时间的推移，基础架构设计可以共享和版本化。 基础架构设计可以被fork和修改以适应特殊情况。 表述隐含的是文档。 随着本章向前推进，我们将看到基础架构表述是如何成为基础架构部署的第一步。我们将以不同的方式探索表述基础架构的能力和潜在缺陷。 表述基础架构 首先，我们需要理解表述基础架构的两个角色：作者和观众。 作者将定义基础架构，通常是人类运维人员或管理员。观众将负责解释基础架构表述。有时候，这是一个运维人员执行手动步骤，但希望它是一个可以自动分析和创建基础架构的部署工具。作者在准确表达基础架构方面表现得越好，我们就可以在听众解释表达的能力中获得更多的信心。 创作基础架构表述时主要关心的是要让观众了解它。如果目标受众是人，则表述可能以技术图或抽象代码的形式出现。如果目标受众是一个程序，那么表示可能需要更详细的信息和具体的实施步骤。 尽管有观众，作者应该让观众更容易使用。随着复杂性的增加以及人与程序共同使用基础架构，这将变得非常困难。 表示法需要易于理解，以便能够对其进行准确分析。易于阅读但分析不准确的表述否定了整个工作。观众应该总是努力去解释他们的表述，而不是做出假设。 为了使表达成功，解释需要可预测。如果作者忽略了一个重要的细节，那么最好的观众就会很快失败。具有可预测性将在应用变更时减少错误的发生，并有助于在作者和受众之间建立信任。 基础架构即图 我们用到了白板，开始绘制一张基础架构图。通常情况下，这个过程始于在角落上代表互联网的云形状，以及一些指向方框的箭头。每个框代表系统中的一个组件，箭头表示它们之间的交互。图3-1是基础架构图的一个例子。 图3-1. 简单的基础架构图 这是一个非常有效的头脑风暴和将想法传达给其他人的方法。它允许对复杂的基础架构设计进行快速而强大的表示。 图片适用于人类，大量人群和CEO。这些图也适用，因为它们使用常用语来表示关系。例如，此框可能会将数据发送到那个框，但不会将数据发送到其他框。 不幸的是，图表对于计算机来说几乎是不可能理解的。在计算机视觉迎头赶上之前，基础架构图仍然是一个代表，可以用眼球来解释，而不是代码。 从图中进行部署 在例3-1中，我们看一个来自bash_history文件的熟悉的代码片段。它代表一个基础架构运营商，作为描述基础服务器与网络、存储和转租服务运行的图表的受众。 运维人员已经手动部署了一台新的虚拟机，并通过SSH连接到了该机器并开始配置它。在这种情况下，人类充当图解释者，然后在基础架构环境中采取行动。 大多数基础架构工程师在他们的职业生涯中都这样做了，而且这些步骤对于某些系统管理员来说应该是非常熟悉的。 例3-1. bash_history sudo emacs /etc/networking/interfaces sudo ifdown eth0 sudo ifup eth0 sudo fdisk -l sudo emacs /etc/fstab sudo mount -a sudo systemctl enable kubelet 基础架构即脚本 如果您是一个系统管理员，您工作的一部分是在复杂系统中进行更改；确保这些更改是正确的也是您的责任。需要将这些变化传播到广阔的系统中是非常现实的。不幸的是，人为错误也是如此。管理员为这项工作编写便利脚本并不奇怪。 脚本可以帮助减少重复任务中人为错误的数量，但自动化是一把双刃剑。这并不意味着准确性或成功。 对于SRE，自动化可以让你力量倍增，单它不是万能药。当然，加倍的力量并不会自然地改变应用力的准确性：不经意地进行自动化可能会产生很多的问题。 ——Niall Murphy、John Looney和Kacirek，自动化在谷歌的演变 编写脚本是自动执行步骤以产生所需结果的好方法。该脚本可以执行各种任务，例如安装HTTP服务器，配置并运行它。但是，脚本中的步骤在调用时很少考虑到它们的结果或系统的状态。 在这种情况下，脚本是编码数据，表示创建所需基础架构应该发生的情况。另一位运维人员或管理员可以评估您的脚本，并希望了解脚本正在做什么。换句话说，他们会解释你的基础架构表示。了解所需的基础架构需要了解步骤如何影响系统。 脚本的运行时会按照它们定义的顺序执行这些步骤，但运行时不知道它正在生成什么。脚本是代码，脚本的执行结果希望是所需的基础架构。 这适用于普遍的场景，但这种方法存在一些缺陷。最明显的缺陷是运行相同的脚本可能获得两个不同的结果。 如果脚本第一次运行的环境与第二次运行的环境大不相同？从科学的角度来说，这将类似于程序中的缺陷，并会使实验数据无效。 使用脚本来表示基础架构的另一个缺陷是缺少声明状态。脚本的运行时不理解结束状态，因为它只提供了执行步骤。人类需要从步骤中解释理想的结果，以了解如何进行改变。 我们看到过很多人类难以理解的代码。随着配置脚本复杂性的增长，我们解释脚本的能力就会减弱。此外，您的基础架构页需要随时间而变化，脚本将不可避免地需要更改。 如果不将步骤抽象为声明性状态，为了给每个可能的初始状态创建过程，脚本将不断增长。这包括抽象出操作系统（例如apt和DNF）之间的步骤和差异，以及验证可以安全地跳过哪些步骤。 基础架构即代码带来了一些工具，这些工具提供了一些抽象，以帮助减轻使用脚本管理基础架构的负担。 从脚本部署 创建基础架构的下一个发展是开始采用先前手动管理基础架构的流程，并通过将工作封装在脚本中来简化它。想象一下，我们有一个名为createVm.sh的bash脚本，它将在我们的本地工作站中创建一台虚拟机。 该脚本需要两个参数。第一个是分配给虚拟机上的网络接口的静态IP地址。第二个是以千兆字节为单位的大小，用于创建卷并将其挂载到虚拟机。 示例3-2将基础架构的基本表示形式显示为脚本。该脚本将提供新的基础架构，并在新创建的基础架构上运行任意配置脚本。该脚本可能演变为高度可定制的，并且可能是（危险地）自动化的，只需点击一下按钮即可运行。 例3-2. 基础架构即脚本 #!/bin/bash # Create a VM with a NIC on 10.0.0.17 and a 100gb volume createVm.sh 10.0.0.17 100 # Transfer the bootstrapping script scp ~/vm_provision.sh user@10.0.0.17:vm_provision.sh -v # Run the bootstrap script ssh user@10.0.0.17 sh ~/vm_provision.sh 基础架构即代码 配置管理曾经是代表基础架构的主要角色。我们可以将配置管理视为抽象脚本，自动考虑初始状态以执行正确的过程。最重要的是，配置管理允许作者声明节点的期望状态，而不是实现它所需的每一步。 配置管理是基础架构即代码的第一步，但相关工具很少超出单个服务器的范围。配置管理工具在定义特定资源和他们的状态方面做得非常出色，但由于基础架构需要资源之间的协调，所以出现了复杂性。 例如，服务的DNS条目在提供服务之前不可用。在主机可用之前不应该提供该服务。如果不能在独立节点之间协调多个资源，则配置管理提供的抽象化是不足的。有些工具增加了协调资源之间配置的能力，但协调通常是程序性的，责任落到了人们的协调资源和理解所需状态上。 您的基础架构不包含没有通信的独立实体。代表基础架构的工具需要考虑到这一点。因此，需要另一种表示来管理低级别抽象（例如操作系统）以及供应和协调。 2014年7月，有个开源工具在代码发布的时候采用了更高级别的基础架构抽象概念。这个名为Terraform的工具非常成功。它在配置管理完善并且公有云的采用呈上升趋势的时间节点发布。用户看到了新环境中工具的局限性，Terraform很好的满足了他们的需求。 在2011年时，我们最初将基础架构视代码。我们注意到我们正在编写工具来解决许多项目的基础架构问题，并希望将流程标准化。 ——Hashicorp首席执行官兼Terraform创始人Mitchell Hashimoto Terraform使用专门的领域特定语言（DSL）表示基础架构，它在人类可理解的图像和机器可分析的代码之间做了良好的折衷。Terraform最成功的部分是抽象的基础架构视图，资源协调以及应用时利用现有工具的能力。Terraform与云API进行通信以配置基础架构，并可在必要时使用配置管理来配置节点。 这是该行业的根本性转变，因为我们看到一次性配置脚本正在消失。越来越多的运营商开始在新的DSL中开发基础架构表示。过去在基础架构上手动操作的工程师现在正在开发代码。 新的DSL解决了将基础架构表示为脚本的问题，并成为表示基础架构的标准。工程师发现他们正在开发更好的基础架构代码，并允许Terraform对其进行解释。与配置管理代码一样，工程师们开始将他们的基础架构表述存储在版本控制系统中，并将基础架构与软件等同看待。 通过表述基础架构的标准化方式，我们摆脱了学习各种专有云API的痛苦。尽管并非所有云资源都可以用单一表示抽象出来，但大多数用户可以接受其代码中的云锁定。拥有人类可读并且机器可解析的基础架构表示，而不仅仅是独立的资源声明，这一点永远得改变了行业。 从代码部署 在面临将基础架构部署为脚本的挑战之后，我们已经创建了一个程序来解析输入并针对我们的基础架构采取行动。 例3-3显示了从Terraform开源库中获取的Terraform配置。注意代码中有变量，需要在运行时解析。 基础架构的声明性表示很重要，因为它没有定义创建基础架构的各个步骤。这使我们能够分离需要调配的部分和调配的部分。这就是使这种基础架构代表成为新范例的原因；这也是向软件基础架构演进的第一步。 以这种方式来表示基础架构对于工程师来说是一种常见的强大做法。用户可以使用Terraform来应用基础架构。 例3-3. example.tf # Create our DNSimple record resource \"dnsimple_record\" \"web\" { domain = \"${var.dnsimple_domain}\" name = \"terraform\" value = \"${hostname}\" type = \"CNAME\" ttl = 3600 } 基础架构即软件 基础架构即代码是朝着正确方向发展的强大举措。但是代码是基础架构的静态表示，并且有其局限性。您可以自动执行部署代码更改的过程，但除非部署工具持续运行，否则仍会出现配置漂移。传统上，部署工具只能在一个方向上工作：它只能创建新对象，并且不能轻易删除或修改现有对象。 为了掌握基础架构，我们的部署工具需要根据基础架构的初始表示进行工作，并对数据进行变更以创建更灵活的系统。当我们开始将基础架构表示视为一个可持续执行所需状态的可版本化数据体时，下一步就是将基础架构视为软件。 Terraform从配置管理中吸取教训并改进了这一概念，以更好地配置基础架构和协调资源。应用程序需要一个抽象层来更有效地利用资源。正如我们在第1章中所解释的那样，应用程序不能直接在IaaS上运行，而需要在可以管理资源和运行应用程序的平台上运行。 IaaS将原始组件作为临时API端点呈现，平台呈现更容易被应用程序使用的资源的API。其中一些资源可能提供IaaS组件（例如，负载均衡器或磁盘卷），但其中许多资源将由平台管理（例如，计算资源）。 平台揭示了一个新的基础架构层，并不断强化所需的状态。平台的组件也是应用程序本身，可以使用相同的期望状态声明进行管理。 API机制允许用户获得将基础架构标准化为代码的好处，并增加了随着时间的推移版本化和更改表示的能力。API允许通过标准实践（如API版本控制）消费资源的新方式。API的使用者可以将其应用程序构建到特定的版本，并相信在使用新的API版本之前，它们的使用不会中断。其中有些做法是以前基础架构即代码工具所缺少的重要功能。 通过持续强化表示的软件，我们现在可以保证我们系统的当前状态。通过提供正确的抽象，平台层变得更加易于使用。 您可能正在绘制基础架构演变与软件演进之间的相似之处。堆栈中的这两层以非常相似的方式进化。 软件正在吞噬世界。 ——Marc Andreessen 封装基础架构并将其视为版本化的API将会非常强大。这极大地提高了负责解释表示的软件项目的速度。由平台提供的抽象是跟上快速增长的云所必需的。这种新模式是当今的模式，并且已经被证明可以扩展到难以估量的基础架构和应用程序。 从软件部署 基础架构即代码和基础架构与软件之间的根本区别在于，软件能够改变数据存储，从而改变基础架构的表示。这是由软件来管理基础架构，代表是运营商和软件之间的交换。 在例3-4中，我们看看使用YAML表示的基础架构。我们可以信任该软件来解释这种表示，并为呈现YAML的结果。 就像与我们开发基础架构代码时一样，我们从基础架构的表示开始。但在这个例子中，软件会持续运行，并确保表示会随时间的推移。从某种意义上说，这仍然是只读的，但是软件可以扩展这个定义来添加自己的元信息，比如标记和资源创建时间。 例3-4. infrastructure.yaml location: \"New York 1\" name: example dns: fqdn: infra.example.com network: cidr: 172.0.0.0/12 serverPools: - bootstrapScript: /home/user/bootstrap.sh diskSize: 40gb firewalls: - rules: - ingressFromPort: 443 ingressProtocol: tcp ingressSource: 0.0.0.0/0 ingressToPort: 443 maxCount: 1 minCount: 1 image: centos-amd64-7 subnets: - cidr: 172.0.100.0/24 部署工具 我们现在了解部署基础架构的两个角色： 作者 定义基础架构的组件 观众 部署工具解释表示并采取行动 我们可以通过很多途径来表述基础架构，采取行动的组成部分是对最初表示的逻辑反映。准确地表示适当的基础架构层并尽可能消除该层的复杂性非常重要。通过简单、有针对性的发布，我们将能够更加准确地应用所需的更改。 《站点可靠性工程》（O'Reilly，2016）总结说：“简单版本通常比复杂版本更好。衡量和理解单一变更的影响，而不是同时发布的一批变更要容易得多。“ 随着我们对基础架构的表示随着时间的推移而变化，以便从底层组件中抽象出来，我们的部署工具已经发生变化，以匹配新的抽象目标。 我们正在将基础架构视为软件边界，并且可以注意到基础架构部署工具新时代的早期迹象。互联网上的开源项目正在出现，声称能够随着时间的推移管理基础架构。工程师的工作是了解项目管理的基础架构层以及它如何影响其现有工具和其他基础架构层。 云原生基础架构方向的第一步是采用配置脚本并安排它们持续运行。有些工程师会故意设计这些脚本，以便随着时间的推移安排好。我们开始看到精心设计的全局锁定机制、高级调度策略和分布式调度方法。 这基本上是配置管理承诺的，尽管在更具资源特定的抽象中。感谢云计算，管理基础架构的自动化脚本的日子已经过去了。 自动化已死。 ——Honeycomb首席执行官Charity Majors 我们正在想象一个我们开始以完全不同的方式看待基础架构工具的世界。如果您的基础架构旨在运行在云上，那么IaaS不是您应该解决的问题。使用云提供的API，并构建可直接由应用程序使用的新基础架构层。 我们在基础架构发展方面处于特殊地位，我们从第一天开始就将基础架构部署工具设计为优雅的应用程序。 良好的部署工具是可以快速从基础架构的人性化表示到可工作基础架构的工具。更好的部署工具是撤销任何与初始表示不一致的变更的工具。最好的部署工具可以完成所有这些工作，而无需人工参与。 在我们构建这些应用程序时，我们不能忘记从处理复杂系统至关重要的专业工具和软件实践中学到的重要经验。 我们将看到的部署工具的一些关键方面是幂等性和处理失败。 幂等性 软件应该是幂等的，这意味着持续输入相同的输入，必须并始终获得相同的输出。 在技术上，这个想法被超文本传输协议（HTTP）通过像PUT和DELETE这样的幂等方法而著名。这个想法飞非常强大，并且在软件中宣传幂等性的保证可以塑造出更佳复杂的软件应用程序。 我们从早期的配置管理工具中学到的经验之一就是幂等性。我们需要记住这个功能为基础架构工程师提供的价值，并且继续将这种模式构建到我们的工具中。 能够自动创建、更新或删除基础架构，保证无论您运行任务的频率如何，始终都会输出相同的结果，这非常令人兴奋。它允许运维人员开始自动化任务和杂事。过去对于运维人员来说，过去相当大量的工作现在可以像在网页中点击按钮一样简单。 幂等保证也有助于运营商在其基础架构上执行质量科学。运营商可以在许多物理位置开始复制基础架构，并知道别人重复他们的程序会得到同样的结果。 我们开始注意到围绕这种自动执行任意任务以实现可重复性的思想构建的整个框架和工具链。 就像软件一样，基础架构也是如此。运营商开始使用这些表示和部署工具自动管理整个管理基础架构的流水线。现在，运维人员的工作变成了开发自动执行这些任务的工具，而不再是自己执行任务。 处理失败 任何软件工程师都可以告诉你在代码中处理故障和边缘案例的重要性。作为基础架构管理员我们自然而然就要考虑这些问题。 如果部署作业在执行过程中失败，更重要的是在这种情况下会发生什么，会发生什么情况？ 在考虑失败的情况下设计我们的部署工具是朝着正确方向迈出的又一步。失败时发送消息或在监控系统中注册警报。我们保存了自动化任务的详细日志。在失败的情况下，我们甚至将逻辑连接在一起。 我们沉迷于失败。我们在失败的情况下开始采取行动，并在事件发生时采取行动。 但围绕单个组件可能出现故障的想法来构建系统与构建组件以使其更容易出故障完全不同。根据故障重试组件或调整其方法是将系统的弹性进一步深入到软件中。这允许更稳定的系统并减少系统本身所需的整体支持。 面向故障而设计组件，而不是系统。 最终一致性 以设计失败的组件为名，我们需要学习一个描述处理失败的常用方法的术语。 最终的一致性意味着企图随着时间的推移调和一个系统。较大的系统和较小的组件都可以遵循这种随时间推移重试失败过程的理念。 最终一致的系统的好处之一是运维人员可以确信它最终会达到预期的状态。这些系统的一个担忧是，有时他们可能花费不恰当的时间来达到所需的状态。 知道什么时候选择一个稳定但缓慢的系统与一个不可靠但快速的系统是管理员必须做出的技术决策。在这个决定中要注意的重要关系是系统交换速度的可靠性。这并不容易，但如果有疑问，请始终选择可靠的系统。 原子性 与最终一致的系统相反的是原子系统，这是一项保证交易，决定了整个工作的成功。如果作业无法完成，则会恢复所做的更改并完全失败。 想象一下需要创建10个虚拟机的工作。工作到达第七台虚拟机，出现问题。根据最终的一致性方法，我们只会反复尝试这项工作，希望最终获得10个虚拟机。 了解我们只能创建7个虚拟机的原因非常重要。想象一下，云计算允许我们创建多少个虚拟机是有限制的。最终一致性模型将继续尝试创建另外三台机器，并且不可避免地会失败每次。 如果这项工作是设计成原子的，那么它将在第七台机器上达到极限，并意识到这是一场灾难性的失败。这项工作将负责删除部分系统。 因此，运维人员可以放心，他们或者完全按照预期建立系统，或者根本不会创建任何东西。这是一个很有意义的想法，因为为了能让系统正常工作，基础架构中的许多组件都依赖于系统中的其他部分。 我们可以引入信心来换取不便。也就是说，管理员会相信他们的系统状态永远不会改变，除非可以应用完美的改变。为了交换这个完美的系统，运维人员可能会面临很大的不便，因为系统可能需要很多工作才能保持平稳运行。 选择一个原子系统是安全的，但可能不是我们想要的。工程师需要知道他们想要什么系统，以及何时选择原子性与最终一致性。 结论 部署基础架构的模式很简单，并且在云可用之前一直保持不变。我们代表基础架构，然后使用一些设备，将基础架构变为现实。 基础架构层与软件应用层具有惊人的类似历史。云原生基础架构也不例外。我们开始发现自己在重复历史，并以新的方式学习古老的教训。 如果我们已经知道其软件对手的未来，那么对于预测基础架构行业未来的能力还有什么要说的？ 云原生基础架构是基础架构演变的一种自然而可能预期的结果。能够以可靠和可重复的方式部署、表示和管理它是必要的。随着时间的推移，我们能够部署我们的部署工具，并转移我们的工作方式，这对于将我们的基础架构保持在一个能够支持其应用层的空间中至关重要。 极客时间·专享福利通道：199元礼包限时放送 | 点击关注【ServiceMesher】 微信公众号回复【加群】加入学习群Copyright © jimmysong.io 2018-2019 all right reserved，powered by Gitbook Updated at 2019-11-03 20:43:55 "}}